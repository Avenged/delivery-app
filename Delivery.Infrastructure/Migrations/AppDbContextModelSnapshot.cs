// <auto-generated />
using System;
using Delivery.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Delivery.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Delivery.Domain.CustomerAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Emails")
                        .HasColumnType("jsonb")
                        .HasColumnName("emails");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.CustomerAggregate", b =>
                {
                    b.OwnsOne("Delivery.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");

                            b1.HasKey("CustomerAggregateId");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerAggregateId");
                        });

                    b.OwnsOne("Delivery.Domain.ValueObjects.PersonalName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("family_name");

                            b1.Property<string>("GivenName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("given_name");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("text")
                                .HasColumnName("middle_name");

                            b1.Property<string>("Prefix")
                                .HasColumnType("text")
                                .HasColumnName("prefix");

                            b1.Property<string>("Suffix")
                                .HasColumnType("text")
                                .HasColumnName("suffix");

                            b1.HasKey("CustomerAggregateId");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerAggregateId");
                        });

                    b.OwnsOne("Delivery.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("phone_number");

                            b1.HasKey("CustomerAggregateId");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerAggregateId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
